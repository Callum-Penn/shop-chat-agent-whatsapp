// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Session {
  id            String    @id
  shop          String
  state         String
  isOnline      Boolean   @default(false)
  scope         String?
  expires       DateTime?
  accessToken   String
  userId        BigInt?
  firstName     String?
  lastName      String?
  email         String?
  accountOwner  Boolean   @default(false)
  locale        String?
  collaborator  Boolean?  @default(false)
  emailVerified Boolean?  @default(false)
}

model CustomerToken {
  id              String    @id
  conversationId  String
  accessToken     String
  refreshToken    String?
  expiresAt       DateTime
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([conversationId])
}

model CodeVerifier {
  id              String    @id
  state           String    @unique
  verifier        String
  createdAt       DateTime  @default(now())
  expiresAt       DateTime

  @@index([state])
}

model User {
  id                String         @id @default(cuid())
  type              String         // "web", "whatsapp"
  shopifyCustomerId String?
  phoneNumber       String?        @unique
  email             String?
  name              String?
  conversations     Conversation[]
  metadata          Json?          // Store custom data like preferences, last seen, etc.
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  @@index([shopifyCustomerId])
  @@index([phoneNumber])
  @@index([email])
}

model Conversation {
  id            String    @id
  userId        String?
  user          User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  channel       String    @default("web") // "web" or "whatsapp"
  messages      Message[]
  metadata      Json?     // Store custom conversation data
  archived      Boolean   @default(false)
  lastMessageAt DateTime? // Track when the last message was sent
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([userId])
  @@index([archived])
  @@index([createdAt])
  @@index([lastMessageAt])
}

model Message {
  id             String       @id @default(cuid())
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  role           String       // "user" or "assistant"
  content        String
  createdAt      DateTime     @default(now())

  @@index([conversationId])
  @@index([createdAt])
}

model CustomerAccountUrl {
  id             String    @id @default(cuid())
  conversationId String    @unique
  url            String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model BroadcastLog {
  id             String    @id @default(cuid())
  message        String
  heading        String?   // Optional heading for the broadcast
  image          String?   // Base64 encoded image data
  imageName      String?   // Original image filename
  imageType      String?   // MIME type of the image
  channels       Json      // { website: boolean, whatsapp: boolean }
  status         String    // 'processing', 'completed', 'failed', 'partial'
  whatsappCount  Int       @default(0)
  results        Json      // { whatsapp: { sent: int, failed: int, errors: [] }, website: { sent: int, failed: int, errors: [] } }
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@index([createdAt])
}

model ProductQuantityIncrement {
  id            String   @id @default(cuid())
  entityId      String   @unique // Product GID or variant GID
  increment     Int      // The quantity increment value
  entityType    String   // "product" or "variant"
  productTitle  String?  // Store product title for easier lookup
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([entityType])
}
